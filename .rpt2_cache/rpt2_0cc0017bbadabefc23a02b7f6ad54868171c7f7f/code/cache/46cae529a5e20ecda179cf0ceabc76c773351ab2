{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport { GameData } from \"../common/GameData\";\r\nimport GameInfoManager from \"./GameInfoManager\";\r\nimport GameConst from \"../common/GameConst\";\r\nimport ConfigManager from \"./ConfigManager\";\r\nimport { localData } from \"../common/GameDataType\";\r\nvar PatternMgr = (function () {\r\n    function PatternMgr() {\r\n    }\r\n    Object.defineProperty(PatternMgr, \"instance\", {\r\n        get: function () {\r\n            if (!PatternMgr.ins)\r\n                PatternMgr.ins = new PatternMgr();\r\n            return PatternMgr.ins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PatternMgr.prototype.getLevelData2Uglify = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, config, netData, dataArr, i, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getPatternConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        config = configs[\"103\"];\r\n                        netData = GameData.getInstance().level[\"103\"];\r\n                        dataArr = [];\r\n                        for (i = 0; i < config.maxnum; i++) {\r\n                            data = new localData.LevelData2();\r\n                            data.id = i + 1;\r\n                            data.unlock = data.id <= netData.curLv;\r\n                            data.isCur = data.id == netData.passLv + 1;\r\n                            dataArr.push(data);\r\n                        }\r\n                        return [2, dataArr];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PatternMgr.prototype.getPatternConfBySort = function (sort) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, key, element;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getPatternConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        for (key in configs) {\r\n                            element = configs[key];\r\n                            if (element.sort == sort) {\r\n                                return [2, element];\r\n                            }\r\n                        }\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PatternMgr.prototype.getTotLevelUglify = function () {\r\n        var data = GameData.getInstance().level;\r\n        var num = 0;\r\n        for (var key in data) {\r\n            if (data[key].passLv)\r\n                num += data[key].passLv;\r\n        }\r\n        return num;\r\n    };\r\n    PatternMgr.prototype.unlockPatternUglify = function (curPattern, curLv) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, config, nextP, pattern;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getPatternConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        config = configs[curPattern];\r\n                        if (curLv < config.openLN)\r\n                            return [2];\r\n                        return [4, this.getPatternConfBySort(config.sort + 1)];\r\n                    case 2:\r\n                        nextP = _a.sent();\r\n                        if (!nextP)\r\n                            return [2];\r\n                        pattern = nextP.ID;\r\n                        if (GameData.getInstance().level[pattern])\r\n                            return [2];\r\n                        switch (pattern) {\r\n                            case 101:\r\n                                GameData.getInstance().level[pattern] = { passLv: 0, curLv: 1 };\r\n                                break;\r\n                            case 102:\r\n                                GameData.getInstance().level[pattern] = { passLv: 0, curLv: 1, lv: { 1: { star: 0 } } };\r\n                                break;\r\n                            case 103:\r\n                                GameData.getInstance().level[pattern] = { passLv: 0, curLv: 1 };\r\n                                break;\r\n                        }\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PatternMgr.prototype.updateLevelUglify = function (data) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, config, next, pa1, pa2;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getPatternConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        config = configs[data.pattern];\r\n                        next = data.curLv + 1;\r\n                        if (next > config.maxnum) {\r\n                            next = config.maxnum;\r\n                        }\r\n                        switch (data.pattern) {\r\n                            case 101:\r\n                            case 103:\r\n                                pa1 = GameData.getInstance().level[data.pattern];\r\n                                if (data.curLv > pa1.passLv)\r\n                                    GameData.getInstance().level[data.pattern] = { passLv: data.curLv, curLv: next };\r\n                                break;\r\n                            case 102:\r\n                                pa2 = GameData.getInstance().level[data.pattern];\r\n                                pa2.passLv = data.curLv;\r\n                                pa2.curLv = next;\r\n                                if (pa2.lv[data.curLv]) {\r\n                                    if (data.star > pa2.lv[data.curLv].star)\r\n                                        pa2.lv[data.curLv].star = data.star;\r\n                                }\r\n                                else {\r\n                                    pa2.lv[data.curLv] = { star: data.star };\r\n                                }\r\n                                if (!pa2.lv[next])\r\n                                    pa2.lv[next] = { star: 0 };\r\n                                GameData.getInstance().level[data.pattern] = pa2;\r\n                                break;\r\n                        }\r\n                        return [4, this.unlockPatternUglify(data.pattern, data.curLv)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        GameInfoManager.getInstance().saveInfo(GameConst.LEVEL_INFO);\r\n                        return [2, next];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PatternMgr;\r\n}());\r\nexport default PatternMgr;\r\nwindow['PatternMgr'] = PatternMgr;\r\n",
  "references": [
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameData.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/GameInfoManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConst.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/ConfigManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameDataType.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConfigType.ts"
  ]
}
