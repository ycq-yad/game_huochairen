{
  "code": "var ObjectUtil = (function () {\r\n    function ObjectUtil() {\r\n    }\r\n    ObjectUtil.isEmpty = function (obj, unsafe) {\r\n        if (unsafe === void 0) { unsafe = true; }\r\n        return unsafe && (obj === undefined || obj === null) ? true : this.isEqual({}, obj);\r\n    };\r\n    ObjectUtil.isEqual = function (oldVal, newVal) {\r\n        return !this.compare(oldVal, newVal, { strict: true }).flag;\r\n    };\r\n    ObjectUtil.copy = function (obj) {\r\n        return this.compare({}, obj).result;\r\n    };\r\n    ObjectUtil.minus = function (oldVal, newVal) {\r\n        return this.compare(oldVal, newVal, { strict: false }).result;\r\n    };\r\n    ObjectUtil.merge = function (oldVal, newVal, data) {\r\n        if (!data)\r\n            data = { full: true, strict: true, repeat: true };\r\n        var val = this.compare(oldVal, newVal, { strict: data.strict, merge: true, full: data.full, repeat: data.repeat });\r\n        return (val.flag ? val.result : this.copy(oldVal));\r\n    };\r\n    ;\r\n    ObjectUtil.compare = function (oldVal, newVal, data) {\r\n        var _this = this;\r\n        var result, flag = false;\r\n        if (!data)\r\n            data = { strict: false, merge: false, full: false, repeat: false };\r\n        switch ([oldVal, newVal].filter(function (item) { return item instanceof Object; }).length) {\r\n            case 2:\r\n                if (!data.strict && oldVal instanceof Array && newVal instanceof Array) {\r\n                    result = data.merge && data.full ? this.copy(oldVal) : [];\r\n                    newVal.forEach(function (item) {\r\n                        if (data.merge) {\r\n                            if (data.repeat) {\r\n                                result.push(_this.copy(item));\r\n                            }\r\n                            else {\r\n                                if (!result.some(function (res) { return _this.isEqual(res, item); })) {\r\n                                    result.push(_this.copy(item));\r\n                                }\r\n                            }\r\n                            flag = true;\r\n                        }\r\n                        else {\r\n                            if (!oldVal.some(function (old) { return _this.isEqual(old, item); })) {\r\n                                result.push(_this.copy(item));\r\n                                flag = true;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    var oldKey_1 = Object.keys(oldVal), newKey_1 = Object.keys(newVal);\r\n                    switch ([oldVal, newVal].filter(function (item) { return item instanceof Array; }).length) {\r\n                        case 1:\r\n                            result = newVal instanceof Array ? [] : {};\r\n                            newKey_1.forEach(function (item) {\r\n                                result[item] = _this.copy(newVal[item]);\r\n                            });\r\n                            flag = true;\r\n                            break;\r\n                        default:\r\n                            result = data.merge && data.full ? this.copy(oldVal) : newVal instanceof Array ? [] : {};\r\n                            (data.merge ? newKey_1 : oldKey_1).forEach(function (item) {\r\n                                if (data.merge && !data.full) {\r\n                                    result[item] = _this.copy(newVal[item]);\r\n                                    flag = true;\r\n                                }\r\n                                else {\r\n                                    var temp = _this.compare(oldVal[item], newVal[item], { strict: data.strict, merge: data.merge, full: data.full, repeat: data.repeat });\r\n                                    if (temp.flag) {\r\n                                        if (newKey_1.indexOf(item) === -1) {\r\n                                            delete result[item];\r\n                                        }\r\n                                        else {\r\n                                            result[item] = temp.result;\r\n                                        }\r\n                                        flag = true;\r\n                                    }\r\n                                }\r\n                            });\r\n                            !data.merge && newKey_1.forEach(function (item) {\r\n                                if (oldKey_1.indexOf(item) === -1) {\r\n                                    result[item] = _this.copy(newVal[item]);\r\n                                    flag = true;\r\n                                }\r\n                            });\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                result = newVal instanceof Object ? this.copy(newVal) : newVal;\r\n                flag = true;\r\n                break;\r\n            default:\r\n                if (oldVal !== newVal) {\r\n                    result = newVal;\r\n                    flag = true;\r\n                }\r\n        }\r\n        return {\r\n            result: result,\r\n            flag: flag\r\n        };\r\n    };\r\n    ;\r\n    return ObjectUtil;\r\n}());\r\nexport { ObjectUtil };\r\n",
  "references": []
}
