{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport ConfigManager from \"./ConfigManager\";\r\nimport { GameData } from \"../common/GameData\";\r\nimport GameInfoManager from \"./GameInfoManager\";\r\nimport GameConst from \"../common/GameConst\";\r\nvar SkinMgr = (function () {\r\n    function SkinMgr() {\r\n    }\r\n    Object.defineProperty(SkinMgr, \"instance\", {\r\n        get: function () {\r\n            if (!SkinMgr.ins)\r\n                SkinMgr.ins = new SkinMgr();\r\n            return SkinMgr.ins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SkinMgr.prototype.getBrushDataUglify = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, netData, dataArr, key, config, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getBrushConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        netData = GameData.getInstance().brush;\r\n                        dataArr = [];\r\n                        for (key in configs) {\r\n                            config = configs[key];\r\n                            data = {\r\n                                id: config.ID,\r\n                                icon: config.icon,\r\n                                unlock: netData.owns.indexOf(config.ID) > -1,\r\n                                use: netData.using == config.ID,\r\n                                weight: config.weight\r\n                            };\r\n                            dataArr.push(data);\r\n                        }\r\n                        return [2, dataArr];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SkinMgr.prototype.useBrushUglify = function (id) {\r\n        GameData.getInstance().brush.using = id;\r\n        GameInfoManager.getInstance().saveInfo(GameConst.BRUSH_INFO);\r\n    };\r\n    SkinMgr.prototype.unlockBrushUglify = function (id) {\r\n        GameData.getInstance().brush.owns.push(id);\r\n        GameInfoManager.getInstance().saveInfo(GameConst.BRUSH_INFO);\r\n    };\r\n    SkinMgr.prototype.getCurBrushDataUglify = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getBrushConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        return [2, configs[GameData.getInstance().brush.using]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SkinMgr;\r\n}());\r\nexport default SkinMgr;\r\n",
  "references": [
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/ConfigManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameData.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/GameInfoManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConst.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConfigType.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameDataType.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/tool/ArrayUtil.ts"
  ]
}
