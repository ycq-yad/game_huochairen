{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport { GameData } from \"../common/GameData\";\r\nimport * as DataType from \"../common/GameDataType\";\r\nimport ConfigManager from \"./ConfigManager\";\r\nimport GameInfoManager from \"./GameInfoManager\";\r\nimport GameConst from \"../common/GameConst\";\r\nvar SignManager = (function () {\r\n    function SignManager() {\r\n    }\r\n    Object.defineProperty(SignManager, \"instance\", {\r\n        get: function () {\r\n            if (SignManager.ins == null) {\r\n                SignManager.ins = new SignManager();\r\n            }\r\n            return SignManager.ins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SignManager.prototype.getSignDataUglify = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var signConfig, signIn, curCanSign, len, dataArr, i, sign, canSign, signed, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getSignConfig()];\r\n                    case 1:\r\n                        signConfig = _a.sent();\r\n                        signIn = GameData.getInstance().signIn;\r\n                        curCanSign = this.checkSign();\r\n                        len = signConfig.length;\r\n                        if (curCanSign) {\r\n                            if (signIn.total_count >= len) {\r\n                                signIn.total_count = 0;\r\n                            }\r\n                            GameData.getInstance().signIn = signIn;\r\n                        }\r\n                        dataArr = [];\r\n                        for (i = 0; i < len; i++) {\r\n                            sign = signConfig[i];\r\n                            canSign = false;\r\n                            signed = false;\r\n                            if (i == signIn.total_count && curCanSign)\r\n                                canSign = true;\r\n                            if (i < signIn.total_count)\r\n                                signed = true;\r\n                            data = new DataType.localData.SignData();\r\n                            data.id = sign.id;\r\n                            data.name = sign.name;\r\n                            data.reward = sign.reward;\r\n                            data.canSign = canSign;\r\n                            data.isSigned = signed;\r\n                            dataArr.push(data);\r\n                        }\r\n                        return [2, dataArr];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SignManager.prototype.checkSign = function () {\r\n        var signIn = GameData.getInstance().signIn;\r\n        var lastTime = signIn.timeStamp;\r\n        var currTime = (new Date()).getTime();\r\n        var isOneDay = Utils.judgeIsOnTheSameDay(lastTime, currTime);\r\n        return !isOneDay;\r\n    };\r\n    SignManager.prototype.updateSignDay = function () {\r\n        GameData.getInstance().signIn.timeStamp += 24 * 3600 * 1000;\r\n        GameInfoManager.getInstance().saveInfo(GameConst.SIGN_INFO);\r\n    };\r\n    return SignManager;\r\n}());\r\nexport default SignManager;\r\nwindow[\"SignManager\"] = SignManager;\r\n",
  "references": [
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameData.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameDataType.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/ConfigManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/GameInfoManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConst.ts"
  ]
}
