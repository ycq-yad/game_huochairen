{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport { GameData } from \"../common/GameData\";\r\nimport GameInfoManager from \"./GameInfoManager\";\r\nimport GameConst from \"../common/GameConst\";\r\nimport GameEvent from \"../common/GameEvent\";\r\nimport ConfigManager from \"./ConfigManager\";\r\nimport { localData } from \"../common/GameDataType\";\r\nimport SignManager from \"./SignManager\";\r\nimport PatternMgr from \"./PatternMgr\";\r\nvar PowerMgr = (function () {\r\n    function PowerMgr() {\r\n        this.powerLimit = GameData.getInstance().defaultConfigs.rePowerLimit;\r\n        this.powerRestoreTime = GameData.getInstance().defaultConfigs.rePowerCD * 1000;\r\n    }\r\n    Object.defineProperty(PowerMgr, \"instance\", {\r\n        get: function () {\r\n            if (!PowerMgr.ins)\r\n                PowerMgr.ins = new PowerMgr();\r\n            return PowerMgr.ins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PowerMgr.prototype, \"power\", {\r\n        get: function () {\r\n            return GameData.getInstance().playerData.power;\r\n        },\r\n        set: function (num) {\r\n            GameData.getInstance().playerData.power = num;\r\n            if (GameData.getInstance().playerData.power > GameData.getInstance().defaultConfigs.maxPower) {\r\n                GameData.getInstance().playerData.power = GameData.getInstance().defaultConfigs.maxPower;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PowerMgr.prototype.spaceTimeRestorePowerUglify = function () {\r\n        var showTime = 0;\r\n        if (this.power >= this.powerLimit) {\r\n            GameData.getInstance().playerData.lastPowerTime = 0;\r\n            GameInfoManager.getInstance().saveInfo(GameConst.BASE_INFO);\r\n            return showTime;\r\n        }\r\n        else {\r\n            var powerTime = GameData.getInstance().playerData.lastPowerTime;\r\n            if (powerTime != null && powerTime != 0) {\r\n                var nowTime = new Date().getTime();\r\n                var disTime = nowTime - powerTime;\r\n                if (disTime >= 0) {\r\n                    var count = Math.floor(disTime / this.powerRestoreTime);\r\n                    var diffTime = disTime % this.powerRestoreTime;\r\n                    if (count > 0) {\r\n                        this.power += count;\r\n                    }\r\n                    if (this.power >= this.powerLimit) {\r\n                        console.warn(\"体力达自然恢复上限！\");\r\n                        GameData.getInstance().playerData.lastPowerTime = 0;\r\n                    }\r\n                    else {\r\n                        showTime = this.powerRestoreTime - diffTime;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                showTime = this.powerRestoreTime;\r\n                GameData.getInstance().playerData.lastPowerTime = new Date().getTime();\r\n            }\r\n            GameInfoManager.getInstance().saveInfo(GameConst.BASE_INFO);\r\n            return showTime;\r\n        }\r\n    };\r\n    PowerMgr.prototype.changePowerUglify = function (data) {\r\n        var count = data.count;\r\n        var isNatural = data.isNatural;\r\n        if (count < 0) {\r\n            if (this.power + count < 0) {\r\n                EventMgr.getInstance().sendEvent(GameEvent.OPEN_BUY_PROP, { type: 1 });\r\n                return;\r\n            }\r\n            else {\r\n                data.success && data.success();\r\n                if (this.power < this.powerLimit) {\r\n                    this.power += count;\r\n                }\r\n                else {\r\n                    if (this.power + count < this.powerLimit) {\r\n                        console.warn(\"开始自然恢复\");\r\n                        this.power += count;\r\n                        GameData.getInstance().playerData.lastPowerTime = new Date().getTime();\r\n                        EventMgr.getInstance().sendEvent(GameEvent.POWER_REPLY_STATUS, 2);\r\n                    }\r\n                    else {\r\n                        this.power += count;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.power += count;\r\n            if (this.power >= this.powerLimit) {\r\n                console.warn(\"体力达自然恢复上限！\");\r\n                GameData.getInstance().playerData.lastPowerTime = 0;\r\n                EventMgr.getInstance().sendEvent(GameEvent.POWER_REPLY_STATUS, 1);\r\n            }\r\n            else {\r\n                if (isNatural) {\r\n                    GameData.getInstance().playerData.lastPowerTime = new Date().getTime();\r\n                }\r\n            }\r\n        }\r\n        EventMgr.getInstance().sendEvent(GameEvent.REFRESH_TOP);\r\n        GameInfoManager.getInstance().saveInfo(GameConst.BASE_INFO);\r\n    };\r\n    PowerMgr.prototype.checkPowerIsOrNotEnoughUglify = function (value) {\r\n        var isEnough = value <= this.power ? true : false;\r\n        return isEnough;\r\n    };\r\n    PowerMgr.prototype.getFreePowerDataUglify = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configs, netData, dataArr, totLv, i, len, element, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, ConfigManager.instance.getFreePowerConfig()];\r\n                    case 1:\r\n                        configs = _a.sent();\r\n                        netData = GameData.getInstance().freePower;\r\n                        dataArr = [];\r\n                        totLv = PatternMgr.instance.getTotLevelUglify();\r\n                        for (i = 0, len = configs.length; i < len; i++) {\r\n                            element = configs[i];\r\n                            data = new localData.FreePowerData();\r\n                            data.id = element.id;\r\n                            data.name = element.name;\r\n                            data.rewardNum = element.reward;\r\n                            data.icon = element.icon;\r\n                            data.param = element.param;\r\n                            data.isGeted = !!netData[data.id];\r\n                            if (data.id == 1) {\r\n                                data.canGet = !SignManager.instance.checkSign();\r\n                            }\r\n                            else {\r\n                                data.canGet = totLv >= element.param;\r\n                            }\r\n                            dataArr.push(data);\r\n                        }\r\n                        return [2, dataArr];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PowerMgr;\r\n}());\r\nexport default PowerMgr;\r\n",
  "references": [
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameData.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/GameInfoManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameConst.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameEvent.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/ConfigManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/common/GameDataType.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/SignManager.ts",
    "E:/laya/project/laya_firePeople2_git_ts/src/script/manager/PatternMgr.ts"
  ]
}
